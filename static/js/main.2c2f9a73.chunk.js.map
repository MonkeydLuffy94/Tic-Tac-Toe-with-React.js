{"version":3,"sources":["logo.svg","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","classNameProp","onClick","value","Board","createClassName","i","winningSquares","a","b","c","renderSquare","board","key","collectSquares","row","rowSquares","j","push","boardRow","collectRows","Game","findSquareLocation","index","col","state","history","Array","fill","location","xIsNext","stepNumber","this","slice","current","length","calculateWinner","winner","setState","concat","step","isWin","status","moves","map","move","desc","jumpTo","handleClick","React","Component","possibleLines","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c2f9a73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\n\r\nconst Square = (props) => {\r\n  return (\r\n    <button className={`square ${props.classNameProp}`} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst Board = (props) => {\r\n  const createClassName = (i) => {\r\n    const [a, b, c] = props.winningSquares;\r\n    if (!(a === null)) {\r\n      return i === a || i === b || i === c\r\n        ? \"winning-square\"\r\n        : \"not-winning-square\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square\r\n        value={props.board[i]}\r\n        onClick={() => props.onClick(i)}\r\n        classNameProp={`${createClassName(i)}`}\r\n        key={i}\r\n      />\r\n    );\r\n  };\r\n\r\n  const collectSquares = (row) => {\r\n    let rowSquares = [];\r\n\r\n    for (let j = 0; j < 3; j++) {\r\n      rowSquares.push(renderSquare(row + j));\r\n    }\r\n\r\n    return rowSquares;\r\n  };\r\n\r\n  const collectRows = () => {\r\n    let boardRow = [];\r\n\r\n    for (let row = 0; row < 3; row++) {\r\n      boardRow.push(\r\n        <div className=\"board-row\" key={row}>\r\n          {collectSquares(row < 1 ? row : row < 2 ? row + 2 : row + 4)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return boardRow;\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {collectRows()}\r\n      {/* <div className=\"board-row row-top\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row row-middle\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row row-bottom\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          board: Array(9).fill(null),\r\n          location: {\r\n            col: null,\r\n            row: null,\r\n          },\r\n        },\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const { xIsNext, stepNumber } = this.state;\r\n    const history = this.state.history.slice(0, stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const location = this.findSquareLocation(i + 1);\r\n    const board = current.board.slice();\r\n    if (calculateWinner(board).winner || board[i]) {\r\n      return;\r\n    }\r\n    board[i] = xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          board: board,\r\n          location: location,\r\n        },\r\n      ]),\r\n      xIsNext: !xIsNext,\r\n      stepNumber: history.length,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  findSquareLocation = (index) => {\r\n    let row, col;\r\n\r\n    if (index < 4) {\r\n      row = 1;\r\n      col = index % 4;\r\n    } else if (index < 7) {\r\n      row = 2;\r\n      col = (index % 7) - 3;\r\n    } else {\r\n      row = 3;\r\n      col = (index % 10) - 6;\r\n    }\r\n\r\n    return {\r\n      row: row,\r\n      col: col,\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const { xIsNext, stepNumber } = this.state;\r\n    const current = history[stepNumber];\r\n    const isWin = calculateWinner(current.board);\r\n    const { winner, winningSquares } = isWin;\r\n    const status = winner\r\n      ? `Winner is: ${winner}`\r\n      : stepNumber === 9\r\n      ? \"Match draw!\"\r\n      : `Next Player: ${xIsNext ? \"X\" : \"O\"}`;\r\n\r\n    const moves = history.map(({ location }, move) => {\r\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n      const { row, col } = location;\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            onClick={() => this.jumpTo(move)}\r\n            className={`${move === stepNumber ? \"selected\" : \"\"}`}\r\n          >\r\n            {desc}\r\n            <span>{move ? ` (col: ${col}, row: ${row})` : \"\"}</span>\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div>\r\n          <label className={`status ${winner ? \"status-winner\" : \"\"}`}>\r\n            {status}\r\n          </label>\r\n          <div className=\"game-board\">\r\n            <Board\r\n              board={current.board}\r\n              winningSquares={winningSquares}\r\n              onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst calculateWinner = (board) => {\r\n  const possibleLines = [\r\n    [0, 1, 2],\r\n    [0, 3, 6],\r\n    [0, 4, 8],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [2, 4, 6],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n  ];\r\n\r\n  for (let i = 0; i < possibleLines.length; i++) {\r\n    const [a, b, c] = possibleLines[i];\r\n\r\n    if (board[a] && board[a] === board[b] && board[b] === board[c]) {\r\n      return {\r\n        winner: board[a],\r\n        winningSquares: possibleLines[i],\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    winningSquares: Array(3).fill(null),\r\n  };\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Game from \"./Components/Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}